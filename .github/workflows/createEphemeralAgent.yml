# This is a basic workflow to help you get started with Actions

name: Create VMSS Ephemeral Agent

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      SUBNET_ID:
        required: true
        type: string
      RESOURCE_GROUP:
        required: false
        type: string
        default: "Main"
      LOCATION:
        required: false
        type: string
        default: "Canada Central"
      VM_SIZE:
        required: false
        type: string
        default: "Standard_D2as_v4"
      VM_IMAGE:
        required: false
        type: string
        default: "Canonical:0001-com-ubuntu-server-jammy:22_04-lts-gen2:latest"
    secrets:
      AZURE_CREDENTIALS:
        required: true
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  scale:
    # The type of runner that the job will run on
    runs-on: [ arc-runner-set ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Checkout ephemeral repo
        uses: actions/checkout@v4
        with:
          repository: ${{github.repository_owner}}/createEphemeralAgent
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Run a one-line script
        env:
          GH_SERVER_URL: ${{github.server_url}}
          GH_REPOSITORY_OWNER: ${{github.repository_owner}}
          GH_RUN_ID: ${{github.run_id}}
          GH_RUN_ATTEMPT: ${{github.run_attempt}}
          REPO_NAME: ${{ github.event.repository.name }}
          SUBNET_ID: ${{ inputs.SUBNET_ID }}
          RESOURCE_GROUP: ${{ inputs.RESOURCE_GROUP }}
          LOCATION: ${{ inputs.LOCATION }}
          VM_SIZE: ${{ inputs.VM_SIZE }}
          VM_IMAGE: ${{ inputs.VM_IMAGE }}
          VM_NAME: "actions-ephemeral-${{ github.run_id }}-${{ github.run_attempt }}"
          AZ_SUBSCRIPTION: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
        run: |

          #Get runner registration token
          REG_TOKEN=$(curl -sX POST -H "Authorization: token ${GH_AKS_PAT}" "https://api.github.com/repos/${GH_REPOSITORY_OWNER}/${REPO_NAME}/actions/runners/registration-token" | jq .token --raw-output)
          
          echo "export REPO_NAME=$REPO_NAME REG_TOKEN=$REG_TOKEN GH_SERVER_URL=$GH_SERVER_URL GH_REPOSITORY_OWNER=$GH_REPOSITORY_OWNER" | cat - scripts/setup.sh > temp && mv temp scripts/setup.sh
          echo '#!/bin/sh' | cat - scripts/setup.sh > temp && mv temp scripts/setup.sh

          #Create VM, store VM system identity
          ROLE_IDENTITY=$(az vm create \
              --name "${VM_NAME}" \
              --resource-group "${RESOURCE_GROUP}" \
              --size "${VM_SIZE}" \
              --location "${LOCATION}" \
              --image "${VM_IMAGE}" \
              --ssh-key-values 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICqZj2L3RoLFKbqMDZ6OHILyPerqwJ2Pf9o1Zq86324O' \
              --nic-delete-option delete \
              --os-disk-delete-option delete \
              --tags "GH_RUN_ID=${GH_RUN_ID}" "GH_RUN_ATTEMPT=${GH_RUN_ATTEMPT}" "GH_RESOURCE=ephemeral_runner" "GH_TIME_CREATED=$(date '+%Y-%m-%dT%H:%M:%S')" \
              --subnet "${SUBNET_ID}" \
              --public-ip-address "" \
              --nsg "" \
              --assign-identity "[system]" | jq '.identity.systemAssignedIdentity' --raw-output)
          #Create role assignment to allow VM to delete itself
          az role assignment create \
              --assignee-object-id "${ROLE_IDENTITY}" \
              --role "Virtual Machine Contributor" \
              --scope "/subscriptions/${AZ_SUBSCRIPTION}/resourceGroups/${RESOURCE_GROUP}/providers/Microsoft.Compute/virtualMachines/${VM_NAME}"
          #Run command on VM to set it up as a runner
          az vm run-command invoke \
              --resource-group "${RESOURCE_GROUP}" \
              --name "${VM_NAME}" \
              --scripts @scripts/setup.sh \
              --no-wait \
              --command-id RunShellScript

          #Check if an ephemeral VM has been up for more than 6 hours, if so delete it
          CUTOFF_TIME=$(date --date "6 hours ago" '+%Y-%m-%dT%H:%M:%S')
          az vm list -g "${RESOURCE_GROUP}" --subscription "${AZ_SUBSCRIPTION}" --query "[?contains(name, 'actions-ephemeral') && tags.GH_TIME_CREATED < '${CUTOFF_TIME}'].name"
          az vm list -g "${RESOURCE_GROUP}" --subscription "${AZ_SUBSCRIPTION}" --query "[?contains(name, 'actions-ephemeral') && tags.GH_TIME_CREATED < '${CUTOFF_TIME}'].name" |
          jq -c '.[]' | while read vm; do
              echo "$vm"
              az vm delete -g "${RESOURCE_GROUP}" -n ${vm} --yes --no-wait
              sleep 1000
          done
